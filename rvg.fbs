// RVG IDL file

namespace Rvg;

// A high precision color (RGBA 16-16-16-16).
struct Color {
    r:ushort;
    g:ushort;
    b:ushort;
    a:ushort;
}

table Bitmap {
    pitch:ushort;
    pixels:[Color];
}

enum PathOp:ubyte {
    // PATH (0x0...0xF): Uses `value` for position index
    Move = 0x00, // 
    Line = 0x01,
    Quad = 0x02,
    Cubic = 0x03,
    Arc = 0x04,

    // Fill (0x10-0x1F)
    Solid = 0x10, // Fill with 1 color (before each vertex)
    Bitmap = 0x11, // Fill with bitmap - stretch (before Move)
    Tile = 0x12, // Fill tiled with pattern - Vector Graphics
    Pattern = 0x13, // Fill tiled with pattern - Bitmap
    Stroke = 0x14, // Change stroke color
    Width = 0x15, // Change stroke width
    Dashed = 0x16, // Change dash width (0=100% by default)

    // Join Style (0x20-0x2F)
    JoinMiter = 0x20, // `value` for amount
    JoinBevel = 0x21,
    JoinRound = 0x22,
}

struct Operation {
    path_op: PathOp;
    value: ushort;
}

table Graphic {
    // By default, main axis is X, this will change it to Y if true.
    main_axis:bool = false;
    // By default RVGs are 2D.
    three_dimensions:bool = false;
    // 2nd axis in relation to main.  Range: 0...65,535 -> (0 = equal length, 1-65535 = less length)
    aspect_ratio:ushort = 0;
    // Now we just list the operations.
    operations:[Operation];
    // This is either 2-tuples (2D) or 3-tuples (3D) depending on `three_dimensions` flag.
    positions:[ushort];
    // Colors
    colors:[Color];
    // Bitmaps
    bitmaps:[Bitmap];
    //
    glyphs:[Graphic];
}

// At the root of the file, an RVG is a Graphic.
root_type Graphic;
